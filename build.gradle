plugins {
    id 'java'
    id 'base'
    id 'com.github.johnrengelman.shadow' version '2.0.4'
    id 'checkstyle'
    id 'pmd'
    id 'maven-publish'
    id 'com.jfrog.bintray' version "1.8.4"
    id 'jacoco'
}

apply plugin: 'com.jfrog.bintray'
apply plugin: 'java'
apply plugin: 'base'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'


def versionString = "1.4.7"
version = "${versionString}"

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    //reference to publishing.publications.MyPublication
    publications = ['MyPublication']
    pkg {
        repo = 'aws-build-tools'
        name = 'aws-build-tools'
        licenses = ['MIT']
        userOrg = 'orestis-unit'
        vcsUrl = 'https://github.com/BIBSYSDEV/aws-build-tools'

        version {
            name = "$versionString"
            desc = 'Alpha testing'
            released = new Date()
            vcsTag = "${versionString}"

        }
    }
}


//necessary for publishing
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

//necessary for publishing
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId 'no.bibsys.aws'
            artifactId 'aws-build-tools'
            version "${versionString}"
        }
    }
}


repositories {
    mavenCentral()
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = "5.3.1"
}

dependencies {

    implementation group: 'com.amazonaws', name: 'aws-java-sdk-api-gateway', version: '1.11.517'
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-cloudformation', version: '1.11.517'
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-codepipeline', version: '1.11.517'
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-route53', version: '1.11.517'
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-secretsmanager', version: '1.11.517'

    // For reading and deleting logs (application functionality)
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-logs', version: '1.11.517'

    //this should be the same version as the one used by amazon
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.6.0'

    // useful java libraries
    implementation group: 'com.google.guava', name: 'guava', version: '27.1-jre'

    implementation('io.symphonia:lambda-logging:1.0.3')
    
    compile group: 'org.jacoco', name: 'org.jacoco.core', version: '0.8.3'

    //libraries for testing
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.25.0'
    testImplementation('org.hamcrest:java-hamcrest:2.0.0.0')
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.4.0')
    testImplementation('org.junit.jupiter:junit-jupiter-params:5.4.0')
    testImplementation('org.junit.jupiter:junit-jupiter-engine:5.4.2')
}

test {
    useJUnitPlatform {
        excludeTags 'IntegrationTest'
        includeEngines 'junit-jupiter'
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
    testLogging {
        events "passed", "skipped", "failed"
    }

    jacoco {
        excludes['*SecretsReader*']
    }

    failFast = true
}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
    toolVersion '8.13'
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}


pmd {
    toolVersion = "6.7.0"
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco")
    }
}

jacoco {
    toolVersion = "0.8.3"
}


check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.9
                excludes['*CodePipelineCommunicator*']
            }
        }

        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.9
                excludes['*CodePipelineCommunicator*']
            }
        }

    }
}


shadowJar {
    archiveName = "${baseName}-fat.jar"
    exclude('org.apache.tomcat.embed:*')
}
task fatJar(dependsOn: shadowJar) {}
