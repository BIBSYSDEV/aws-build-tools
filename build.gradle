plugins {
    id 'java'
    id 'base'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'checkstyle'
    id 'pmd'
    id 'maven-publish'
    id 'com.jfrog.bintray' version "1.8.4"
    id 'jacoco'
}

apply plugin: 'com.jfrog.bintray'
apply plugin: 'java'
apply plugin: 'base'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'


java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}


def versionString = "1.5.3"
version = "${versionString}"

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    //reference to publishing.publications.MyPublication
    publications = ['MyPublication']
    pkg {
        repo = 'aws-build-tools'
        name = 'aws-build-tools'
        licenses = ['MIT']
        userOrg = 'orestis-unit'
        vcsUrl = 'https://github.com/BIBSYSDEV/aws-build-tools'

        version {
            name = "$versionString"
            desc = 'Alpha testing'
            released = new Date()
            vcsTag = "${versionString}"

        }
    }
}


//necessary for publishing
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

//necessary for publishing
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId 'no.bibsys.aws'
            artifactId 'aws-build-tools'
            version "${versionString}"
        }
    }
}


repositories {
    mavenCentral()
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = "6.2.2"
}


def awsSdkVersion = "1.11.740"
def jupiterVersion = "5.6.0"

dependencies {
    implementation("com.amazonaws:aws-java-sdk-api-gateway:${awsSdkVersion}")
    implementation("com.amazonaws:aws-java-sdk-cloudformation:${awsSdkVersion}")
    implementation("com.amazonaws:aws-java-sdk-codepipeline:${awsSdkVersion}")
    implementation("com.amazonaws:aws-java-sdk-route53:${awsSdkVersion}")
    implementation("com.amazonaws:aws-java-sdk-secretsmanager:${awsSdkVersion}")

    // For reading and deleting logs (application functionality)
    implementation("com.amazonaws:aws-java-sdk-logs:${awsSdkVersion}")

    //this should be the same version as the one used by amazon
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.10.3")

    // useful java libraries
    implementation("com.google.guava:guava:27.1-jre")

    // TODO: Should we use System.out instead?
    implementation('io.symphonia:lambda-logging:1.0.3')

    compile("org.jacoco:org.jacoco.core:0.8.3")

    testImplementation("org.mockito:mockito-core:3.3.0")
    testImplementation("org.hamcrest:java-hamcrest:2.0.0.0")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${jupiterVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${jupiterVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:${jupiterVersion}")
}

test {
    useJUnitPlatform {
        excludeTags 'IntegrationTest'
        includeEngines 'junit-jupiter'
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
    testLogging {
        events "passed", "skipped", "failed"
    }

    jacoco {
        excludes['*SecretsReader*']
    }

    failFast = true
}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
    toolVersion '8.13'
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}


pmd {
    toolVersion = "6.7.0"
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco")
    }
}

jacoco {
    toolVersion = "0.8.3"
}


check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.9
                excludes['*CodePipelineCommunicator*']
            }
        }

        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.9
                excludes['*CodePipelineCommunicator*']
            }
        }

    }
}


shadowJar {
    archiveName = "${baseName}-fat.jar"
    exclude('org.apache.tomcat.embed:*')
}
task fatJar(dependsOn: shadowJar) {}




